.TH DUALPI2 8 "13 December 2018" "iproute2" "Linux"

.SH NAME
DUALPI2 \- Dual Queue Proportional Integral Controller AQM - Improved with a square
.SH SYNOPSIS
.sp
.ad l
.in +8
.ti -8
.BR tc " " qdisc " ... " dualpi2
.br
.RB "[ " limit
.IR PACKETS " ]"
.br
.RB "[ " coupling_factor
.IR NUMBER " ]"
.br
.RB "[ " step_thresh
.IR TIME | PACKETS " ]"
.br
.RB "[ " drop_on_overload " | " overflow " ]"
.br
.RB "[ " drop_enqueue " | " drop_dequeue " ]"
.br
.RB "[ " l4s_ect " | " any_ect " ]"
.br
.RB "[ " classic_protection
.IR PERCENTAGE " ] "
.br
.RB "[ " max_rtt
.IR TIME 
.RB " [ " typical_rtt 
.IR TIME " ]] "
.br
.RB "[ " target
.IR TIME " ]"
.br
.RB "[ " tupdate
.IR TIME " ]"
.br
.RB "[ " alpha
.IR float " ]"
.br
.RB "[ " beta
.IR float " ] "
.br
.RB "[ " split_gso " | " no_split_gso " ]"

.SH DESCRIPTION
DUALPI2 AQM is a combination of the DUALQ Coupled-AQM with a PI2 base-AQM. The PI2 AQM (details can be found in the paper cited below) is in turn both an extension and a simplification of the PIE AQM. PI2 makes quite some PIE heuristics unnecessary, while being able to control scalable congestion controls like DCTCP and TCP-Prague. With PI2, both Reno/Cubic can be used in parallel with DCTCP, maintaining window fairness. DUALQ provides latency separation between low latency DCTCP flows and Reno/Cubic flows that need a bigger queue. The main design goals are:
.PD 0
.IP \(bu 4
L4S - Low Loss, Low Latency and Scalable congestion control support
.IP \(bu 4
DualQ option to separate the L4S traffic in a low latency queue, without harming remaining traffic that is scheduled in classic queue due to congestion-coupling
.IP \(bu 4
Configurable overload strategies
.IP \(bu 4
Use of sojourn time to reliably estimate queue delay
.IP \(bu 4
Simple implementation
.IP \(bu 4
Guaranteed stability and fast responsiveness
.PD

.SH ALGORITHM
DUALPI2 is designed to provide low loss and low latency to L4S traffic, without harming classic traffic. Every update interval a new internal base probability is calculated, based on queue delay. The base probability is updated with a delta based on the difference between the current queue delay and the 
.I "" target
delay, and the queue growth comparing with the queuing delay during the previous 
.I "" tupdate
interval. The integral gain factor 
.RB "" alpha
is used to correct slowly enough any persistent standing queue error to the user specified target delay, while the proportional gain factor
.RB "" beta
is used to quickly compensate for queue changes (growth or shrink).

The updated base probability is used as input to decide to mark and drop packets. DUALPI2 scales the calculated probability for each of the two queues accordingly. For the L4S queue, the probability is multiplied by a 
.RB "" coupling_factor
, while for the classic queue, it is squared to compensate the squareroot rate equation of Reno/Cubic. The ECT identifier (
.RB "" l4s_ect | any_ect
) is used to classify traffic into respective queues.

If DUALPI2 AQM has detected overload (when excessive non-responsive traffic is sent), it can signal congestion solely using 
.RB "" drop
, irrespective of the ECN field, or alternatively limit the drop probability and let the queue grow and eventually 
.RB "" overflow
(like tail-drop).

Additional details can be found in the draft cited below.

.SH PARAMETERS
.TP
.BI limit " PACKETS"
Limit the number of packets that can be enqueued. Incoming packets are dropped when this limit
is reached. This limit is common for the L4S and Classic queue. Defaults to
.I 10000
packets. This is about 125ms delay on a 1Gbps link.
.TP
.BI coupling_factor " NUMBER"
Set the coupling rate factor between Classic and L4S. Defaults to
.I 2
.TP
.B l4s_ect | any_ect
Configures the ECT classifier. Packets whose ECT codepoint matches this are sent to the L4S queue where they receive a scalable marking. Defaults to
.I l4s_ect
, i.e., the L4S identifier ECT(1). Setting this to
.I any_ect
causes all packets whose ECN field is not zero to be sent to the L4S queue. This enables to be backward compatible with, e.g., DCTCP.
.PD
.BI step_thresh " TIME | PACKETS"
Set the step threshold for the L4S queue. This will cause packets with a sojourn time exceeding the threshold to always be marked. This value can either be specified using time units (i.e., us, ms, s), or in packets (pkt, packet(s)). A velue without units is assumed to be in time (us). If defining the step in packets, be sure to disable GRO on the ingress interfaces. Defaults to
.I 1ms
.
.TP
.B drop_on_overload  |  overflow
Control the overload strategy. 
.I drop_on_overload
preserves the delay in the L4S queue by dropping in both queues on overload.
.I overflow
sacrifices delay to avoid losses, eventually resulting in a taildrop behavior once
.I limit
is reached. Defaults to
.I drop_on_overload.
.PD
.TP
.B drop_enqueue | drop_dequeue
Decide when packets are PI-based dropped or marked. The
.I step_thresh 
based L4S marking is always at dequeue. Defaults to
.I drop_dequeue
.PD
.TP
.BI classic_protection " PERCENTAGE
Protects the classic queue from unresponsive traffic in the L4S queue. This bounds the maximal delay in the C queue to be
.I (100 - PERCENTAGE)
times greater than the one in the L queue. Defaults to
.I 10
.TP
.BI typical_rtt " TIME"
.PD 0
.TP
.PD
.BI max_rtt " TIME"
Specify the maximum round trip time (RTT) and/or the typical RTT of the traffic
that will be controlled by dualpi2. If either of
.I max_rtt
or
.I typical_rtt
is not specified, the missing value will be computed from the following 
relationship:
.I max_rtt = typical_rtt * 6.
If any of these parameters is given, it will be used to automatically compute
suitable values for
.I alpha, beta, target, and tupdate,
according to the relationship from the appendix A.1 in the IETF draft, to
achieve a stable control. Consequently, those derived values will override their
eventual user-provided ones. The default range of operation for the qdisc uses
.I max_rtt = 100ms
and 
.I typical_rtt = 15ms
, which is suited to control internet traffic.
.TP
.BI target " TIME"
Set the expected queue delay. Defaults to
.I 15
ms.
.TP
.BI tupdate " TIME"
Set the frequency at which the system drop probability is calculated. Defaults to
.I 16
ms. This should be a third of the max RTT supported.
.TP
.BI alpha " float"
.PD 0
.TP
.PD
.BI beta " float"
Set alpha and beta, the integral and proportional gain factors in Hz for the PI controller. These can be calculated based on control theory. Defaults are
.I 0.16
and
.I 3.2
Hz, which provide stable control for RTT's up to 100ms with tupdate of 16. Be aware, unlike with PIE, these are the real unscaled gain factors.
.PD
.TP
.B split_gso | no_split_gso
Decide how to handle aggregated packets. Either treat the aggregate as
on single packet (thus all share fate wrt. marks and drops) with
.I no_split_gso
, trading some tail latency for CPU usage, or treat each packet individually
(i.e. split them) with
.I split_gso
to finely mark/drop and control queueing latencies. Defaults to 
.I split_gso

.SH EXAMPLES
Setting DUALPI2 for the Internet with default parameters:
 # sudo tc qdisc add dev eth0 root dualpi2

Setting DUALPI2 for datacenter with legacy DCTCP using ECT(0):
 # sudo tc qdisc add dev eth0 root dualpi2 any_ect

.SH FILTERS
This qdisc can be used in conjunction with tc-filters. More precisely, it will
honor filters "stealing packets", as well as accept other classification schemes.
.BR
.TP
Packets whose priority/classid are set to
.I 1
will be enqueued in the L queue, alongside L4S traffic, and thus subject to the
increase marking probability (or drops if they are marked not-ECT).
.BR
.TP
Packet whose prioriy/classid are set to 
.I 2
will also be enqueued in the L queue, but will never be dropped if they are
not-ECT (unless the qdisc is full and thus resorts to taildrop).
.BR
.TP
Finally, all the other classid/priority map to the classic queue.

.SH SEE ALSO
.BR tc (8),
.BR tc-pie (8)

.SH SOURCES
.IP \(bu 4
IETF draft submission is at https://www.ietf.org/id/draft-ietf-tsvwg-aqm-dualq-coupled
.IP \(bu 4
CoNEXT '16 Proceedings of the 12th International on Conference on emerging Networking EXperiments and Technologies : "PI2: A
Linearized AQM for both Classic and Scalable TCP"

.SH AUTHORS
DUALPI2 was implemented by Koen De Schepper, Olga Albisser, Henrik Steen, and Olivier Tilmans also the authors of
this man page. Please report bugs and corrections to the Linux networking
development mailing list at <netdev@vger.kernel.org>.
